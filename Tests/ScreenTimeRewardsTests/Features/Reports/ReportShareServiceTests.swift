import XCTest
@testable import ScreenTimeRewards
import SharedModels

final class ReportShareServiceTests: XCTestCase {

    var testExportData: ExportData!
    var testChild: ChildProfile!
    var testSummary: ReportSummary!
    var testAppDetails: [AppUsageDetail]!

    override func setUp() {
        super.setUp()

        testChild = ChildProfile(
            id: "test-child",
            familyID: "test-family",
            name: "Test Child",
            avatarAssetURL: nil,
            birthDate: Date().addingTimeInterval(-10 * 365 * 24 * 60 * 60), // 10 years old
            pointBalance: 150,
            totalPointsEarned: 500
        )

        testSummary = ReportSummary(
            totalTimeMinutes: 120,
            totalPointsEarned: 300,
            learningTimeMinutes: 80,
            rewardTimeMinutes: 40,
            averageSessionMinutes: 24,
            totalSessions: 5,
            pointsPerMinute: 2.5
        )

        testAppDetails = [
            AppUsageDetail(
                appBundleID: "com.apple.books",
                appName: "Books",
                category: .learning,
                totalMinutes: 45,
                averageSessionMinutes: 22,
                totalSessions: 2,
                pointsEarned: 135,
                pointsPerHour: 180,
                lastUsed: Date().addingTimeInterval(-3600)
            ),
            AppUsageDetail(
                appBundleID: "com.duolingo.app",
                appName: "Duolingo",
                category: .learning,
                totalMinutes: 35,
                averageSessionMinutes: 17,
                totalSessions: 2,
                pointsEarned: 105,
                pointsPerHour: 180,
                lastUsed: Date().addingTimeInterval(-7200)
            ),
            AppUsageDetail(
                appBundleID: "com.game.app",
                appName: "Game App",
                category: .reward,
                totalMinutes: 40,
                averageSessionMinutes: 40,
                totalSessions: 1,
                pointsEarned: 0,
                pointsPerHour: 0,
                lastUsed: Date().addingTimeInterval(-1800)
            )
        ]

        let dateRange = DateRange(
            start: Date().addingTimeInterval(-7 * 24 * 60 * 60),
            end: Date()
        )

        testExportData = ExportData(
            reportType: .text,
            child: testChild,
            dateRange: dateRange,
            summary: testSummary,
            detailedData: testAppDetails,
            exportDate: Date()
        )
    }

    override func tearDown() {
        testExportData = nil
        testChild = nil
        testSummary = nil
        testAppDetails = nil
        super.tearDown()
    }

    // MARK: - Text Report Generation Tests

    func testGenerateTextReport() {
        let textReport = ReportShareService.generateTextReport(from: testExportData)

        // Check basic structure
        XCTAssertTrue(textReport.contains("ðŸ“Š Screen Time Rewards Report"))
        XCTAssertTrue(textReport.contains("Child: Test Child"))
        XCTAssertTrue(textReport.contains("ðŸ“ˆ SUMMARY"))
        XCTAssertTrue(textReport.contains("ðŸ“± APP BREAKDOWN"))

        // Check summary data
        XCTAssertTrue(textReport.contains("Total Time: 2h 0m"))
        XCTAssertTrue(textReport.contains("Total Points Earned: 300"))
        XCTAssertTrue(textReport.contains("Learning Time: 1h 20m"))
        XCTAssertTrue(textReport.contains("Reward Time: 40m"))
        XCTAssertTrue(textReport.contains("Total Sessions: 5"))
        XCTAssertTrue(textReport.contains("Average Session: 24 minutes"))
        XCTAssertTrue(textReport.contains("Efficiency: 2.50 points/minute"))

        // Check app details
        XCTAssertTrue(textReport.contains("ðŸŽ“ Learning Apps:"))
        XCTAssertTrue(textReport.contains("Books: 45m (2 sessions, 135 pts)"))
        XCTAssertTrue(textReport.contains("Duolingo: 35m (2 sessions, 105 pts)"))

        XCTAssertTrue(textReport.contains("ðŸŽ® Reward Apps:"))
        XCTAssertTrue(textReport.contains("Game App: 40m (1 sessions)"))

        // Check footer
        XCTAssertTrue(textReport.contains("Generated by Screen Time Rewards App"))
    }

    func testGenerateTextReportEmptyApps() {
        let emptyExportData = ExportData(
            reportType: .text,
            child: testChild,
            dateRange: testExportData.dateRange,
            summary: testSummary,
            detailedData: [],
            exportDate: Date()
        )

        let textReport = ReportShareService.generateTextReport(from: emptyExportData)

        XCTAssertTrue(textReport.contains("ðŸ“Š Screen Time Rewards Report"))
        XCTAssertTrue(textReport.contains("ðŸ“ˆ SUMMARY"))
        XCTAssertTrue(textReport.contains("ðŸ“± APP BREAKDOWN"))
        // Should not contain learning or reward app sections
        XCTAssertFalse(textReport.contains("ðŸŽ“ Learning Apps:"))
        XCTAssertFalse(textReport.contains("ðŸŽ® Reward Apps:"))
    }

    // MARK: - CSV Data Generation Tests

    func testGenerateCSVData() {
        let csvData = ReportShareService.generateCSVData(from: testExportData)

        let lines = csvData.components(separatedBy: "\n").filter { !$0.isEmpty }

        // Check header
        XCTAssertEqual(lines.count, 4) // Header + 3 apps
        XCTAssertEqual(lines[0], "App Name,Category,Total Minutes,Sessions,Average Session (min),Points Earned,Points Per Hour,Last Used")

        // Check data rows
        XCTAssertTrue(lines[1].contains("\"Books\",Learning,45,2,22,135,180"))
        XCTAssertTrue(lines[2].contains("\"Duolingo\",Learning,35,2,17,105,180"))
        XCTAssertTrue(lines[3].contains("\"Game App\",Reward,40,1,40,0,0"))
    }

    func testGenerateCSVDataEmptyApps() {
        let emptyExportData = ExportData(
            reportType: .csv,
            child: testChild,
            dateRange: testExportData.dateRange,
            summary: testSummary,
            detailedData: [],
            exportDate: Date()
        )

        let csvData = ReportShareService.generateCSVData(from: emptyExportData)

        let lines = csvData.components(separatedBy: "\n").filter { !$0.isEmpty }
        XCTAssertEqual(lines.count, 1) // Only header
        XCTAssertEqual(lines[0], "App Name,Category,Total Minutes,Sessions,Average Session (min),Points Earned,Points Per Hour,Last Used")
    }

    func testGenerateCSVDataSpecialCharacters() {
        let appWithSpecialChars = AppUsageDetail(
            appBundleID: "com.test.app",
            appName: "App with \"Quotes\" and, Commas",
            category: .learning,
            totalMinutes: 30,
            averageSessionMinutes: 15,
            totalSessions: 2,
            pointsEarned: 60,
            pointsPerHour: 120,
            lastUsed: Date()
        )

        let specialExportData = ExportData(
            reportType: .csv,
            child: testChild,
            dateRange: testExportData.dateRange,
            summary: testSummary,
            detailedData: [appWithSpecialChars],
            exportDate: Date()
        )

        let csvData = ReportShareService.generateCSVData(from: specialExportData)

        // Should properly escape quotes
        XCTAssertTrue(csvData.contains("\"App with \"\"Quotes\"\" and, Commas\"") ||
                      csvData.contains("\"App with \\\"Quotes\\\" and, Commas\""))
    }

    // MARK: - Summary Report Generation Tests

    func testGenerateSummaryReport() {
        let summaryReport = ReportShareService.generateSummaryReport(from: testExportData)

        // Check basic structure
        XCTAssertTrue(summaryReport.contains("ðŸ“Š Test Child's Screen Time Summary"))
        XCTAssertTrue(summaryReport.contains("ðŸ“… Period:"))
        XCTAssertTrue(summaryReport.contains("ðŸŽ¯ Key Metrics:"))
        XCTAssertTrue(summaryReport.contains("ðŸ“ˆ Performance:"))

        // Check metrics
        XCTAssertTrue(summaryReport.contains("Total Screen Time: 2h 0m"))
        XCTAssertTrue(summaryReport.contains("Points Earned: 300"))
        XCTAssertTrue(summaryReport.contains("Learning vs Reward: 67% Learning, 33% Reward"))
        XCTAssertTrue(summaryReport.contains("Average Session: 24 minutes"))
        XCTAssertTrue(summaryReport.contains("Efficiency: 2.5 points per minute"))
        XCTAssertTrue(summaryReport.contains("Total Sessions: 5"))

        // Check footer
        XCTAssertTrue(summaryReport.contains("Generated by Screen Time Rewards"))
    }

    func testGenerateSummaryReportZeroRewardTime() {
        let learningOnlySummary = ReportSummary(
            totalTimeMinutes: 60,
            totalPointsEarned: 180,
            learningTimeMinutes: 60,
            rewardTimeMinutes: 0,
            averageSessionMinutes: 30,
            totalSessions: 2,
            pointsPerMinute: 3.0
        )

        let learningOnlyExportData = ExportData(
            reportType: .summary,
            child: testChild,
            dateRange: testExportData.dateRange,
            summary: learningOnlySummary,
            detailedData: testAppDetails,
            exportDate: Date()
        )

        let summaryReport = ReportShareService.generateSummaryReport(from: learningOnlyExportData)

        XCTAssertTrue(summaryReport.contains("Learning vs Reward: 100% Learning, 0% Reward"))
    }

    // MARK: - Duration Formatting Tests

    func testDurationFormatting() {
        // Test various duration formatting scenarios through the text report
        let testCases = [
            (0, "0m"),
            (30, "30m"),
            (60, "1h 0m"),
            (75, "1h 15m"),
            (120, "2h 0m"),
            (150, "2h 30m")
        ]

        for (minutes, expectedFormat) in testCases {
            let modifiedSummary = ReportSummary(
                totalTimeMinutes: minutes,
                totalPointsEarned: testSummary.totalPointsEarned,
                learningTimeMinutes: testSummary.learningTimeMinutes,
                rewardTimeMinutes: testSummary.rewardTimeMinutes,
                averageSessionMinutes: testSummary.averageSessionMinutes,
                totalSessions: testSummary.totalSessions,
                pointsPerMinute: testSummary.pointsPerMinute
            )

            let modifiedExportData = ExportData(
                reportType: .text,
                child: testChild,
                dateRange: testExportData.dateRange,
                summary: modifiedSummary,
                detailedData: [],
                exportDate: Date()
            )

            let textReport = ReportShareService.generateTextReport(from: modifiedExportData)
            XCTAssertTrue(textReport.contains("Total Time: \(expectedFormat)"), "Failed for \(minutes) minutes")
        }
    }

    // MARK: - Export Type Tests

    func testExportTypeValues() {
        XCTAssertEqual(ExportType.text.rawValue, "Text Report")
        XCTAssertEqual(ExportType.csv.rawValue, "CSV Data")
        XCTAssertEqual(ExportType.summary.rawValue, "Summary Report")

        // Test all cases are covered
        XCTAssertEqual(ExportType.allCases.count, 3)
    }

    // MARK: - Edge Cases Tests

    func testGenerateReportsWithZeroData() {
        let zeroSummary = ReportSummary(
            totalTimeMinutes: 0,
            totalPointsEarned: 0,
            learningTimeMinutes: 0,
            rewardTimeMinutes: 0,
            averageSessionMinutes: 0,
            totalSessions: 0,
            pointsPerMinute: 0.0
        )

        let zeroExportData = ExportData(
            reportType: .text,
            child: testChild,
            dateRange: testExportData.dateRange,
            summary: zeroSummary,
            detailedData: [],
            exportDate: Date()
        )

        let textReport = ReportShareService.generateTextReport(from: zeroExportData)
        XCTAssertTrue(textReport.contains("Total Time: 0m"))
        XCTAssertTrue(textReport.contains("Total Points Earned: 0"))
        XCTAssertTrue(textReport.contains("Efficiency: 0.00 points/minute"))

        let summaryReport = ReportShareService.generateSummaryReport(from: zeroExportData)
        XCTAssertTrue(summaryReport.contains("Total Screen Time: 0m"))
        XCTAssertTrue(summaryReport.contains("Points Earned: 0"))
        XCTAssertTrue(summaryReport.contains("Learning vs Reward: 0% Learning, 0% Reward"))

        let csvData = ReportShareService.generateCSVData(from: zeroExportData)
        let lines = csvData.components(separatedBy: "\n").filter { !$0.isEmpty }
        XCTAssertEqual(lines.count, 1) // Only header
    }

    func testGenerateReportsWithVeryLargeNumbers() {
        let largeSummary = ReportSummary(
            totalTimeMinutes: 10000, // ~166 hours
            totalPointsEarned: 50000,
            learningTimeMinutes: 7000,
            rewardTimeMinutes: 3000,
            averageSessionMinutes: 120,
            totalSessions: 83,
            pointsPerMinute: 5.0
        )

        let largeExportData = ExportData(
            reportType: .text,
            child: testChild,
            dateRange: testExportData.dateRange,
            summary: largeSummary,
            detailedData: [],
            exportDate: Date()
        )

        let textReport = ReportShareService.generateTextReport(from: largeExportData)
        XCTAssertTrue(textReport.contains("Total Time: 166h 40m"))
        XCTAssertTrue(textReport.contains("Total Points Earned: 50000"))
        XCTAssertTrue(textReport.contains("Learning Time: 116h 40m"))
        XCTAssertTrue(textReport.contains("Reward Time: 50h 0m"))
    }

    func testGenerateReportsWithSpecialChildName() {
        let specialChild = ChildProfile(
            id: "test-child",
            familyID: "test-family",
            name: "Child with \"Special\" Characters & Symbols",
            avatarAssetURL: nil,
            birthDate: testChild.birthDate,
            pointBalance: testChild.pointBalance,
            totalPointsEarned: testChild.totalPointsEarned
        )

        let specialExportData = ExportData(
            reportType: .text,
            child: specialChild,
            dateRange: testExportData.dateRange,
            summary: testSummary,
            detailedData: [],
            exportDate: Date()
        )

        let textReport = ReportShareService.generateTextReport(from: specialExportData)
        XCTAssertTrue(textReport.contains("Child: Child with \"Special\" Characters & Symbols"))

        let summaryReport = ReportShareService.generateSummaryReport(from: specialExportData)
        XCTAssertTrue(summaryReport.contains("Child with \"Special\" Characters & Symbols's Screen Time Summary"))
    }

    // MARK: - Date Formatting Tests

    func testDateRangeFormatting() {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium

        let textReport = ReportShareService.generateTextReport(from: testExportData)

        let startDateString = formatter.string(from: testExportData.dateRange.start)
        let endDateString = formatter.string(from: testExportData.dateRange.end)

        XCTAssertTrue(textReport.contains("Period: \(startDateString) - \(endDateString)"))
    }

    // MARK: - Performance Tests

    func testGenerateReportsPerformance() {
        // Create large dataset for performance testing
        var largeAppDetails: [AppUsageDetail] = []
        for i in 0..<1000 {
            largeAppDetails.append(
                AppUsageDetail(
                    appBundleID: "com.test.app\(i)",
                    appName: "Test App \(i)",
                    category: i % 2 == 0 ? .learning : .reward,
                    totalMinutes: i + 1,
                    averageSessionMinutes: (i + 1) / 2,
                    totalSessions: i + 1,
                    pointsEarned: i * 2,
                    pointsPerHour: 120,
                    lastUsed: Date()
                )
            )
        }

        let largeExportData = ExportData(
            reportType: .text,
            child: testChild,
            dateRange: testExportData.dateRange,
            summary: testSummary,
            detailedData: largeAppDetails,
            exportDate: Date()
        )

        measure {
            _ = ReportShareService.generateTextReport(from: largeExportData)
        }
    }
}